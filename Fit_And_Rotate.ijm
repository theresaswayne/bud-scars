// @File(label = "Input folder:", style = "directory") inputdir
// @File(label = "Output folder:", style = "directory") outputdir
// @String(label = "File suffix", value = ".tif") suffix

// Note: DO NOT DELETE OR MOVE THE FIRST 3 LINES -- they supply essential parameters.

// Fit_And_Rotate.ijm
// ImageJ/Fiji macro
// Theresa Swayne, tcs6@cumc.columbia.edu, 2017
// Standardize orientation, positioning, and size of single (budded or unbudded) cell stacks
// Input: a cropped stack (could be generated by Crop_And_Annotate.ijm).
// [Planned] Output: :
// 1) a fluorescence-only stack rotated so that:
//		long axis of mother is horizontal,
//		and there is minimal empty area (100x100 pix?) 
//		(ideally bud position would be standardized)
// 2) a csv file storing fitted ellipses for mother and bud(s) if any, 
//		including major & minor axes, and original angle


setBatchMode(true);

// --------- Setup

CROPSIZE = 100; // final image size in pixels
run("Set Measurements...", "centroid fit display redirect=None decimal=3"); // fit ellipse and record centroid
run("Colors...", "foreground=white background=black selection=yellow");

n = 0; // number of images
processFolder(inputdir); // starts the actual processing 

function processFolder(dir1) 
	{ // recursively goes through folders and finds images that match file suffix
	list = getFileList(dir1);
	for (i=0; i<list.length; i++) 
		{
		if (endsWith(list[i], "/"))
			processFolder(dir1++File.separator+list[i]);
		else if (endsWith(list[i], suffix))
			processImage(dir1, list[i]);
		}
	} // end processFolder

function processImage(dir1, name) 
	{ // processes images found by processFolder
	open(dir1+File.separator+name);
	print(n++, name); // log of image number and names

	id = getImageID();
	title = getTitle();
	dotIndex = indexOf(title, ".");
	basename = substring(title, 0, dotIndex);

	// ======== begin testing

	// threshold and fit artificial images
	run("Select None");
	setAutoThreshold("Default dark");
	setOption("BlackBackground", true);
	run("Convert to Mask");
	run("Analyze Particles...", "display exclude clear add");
	ANGLE = getResult("Angle",0); // 1st row of results
	CENTER_X = getResult("X",0);
	CENTER_Y = getResult("Y",0);
	
	// recover ellipse values and use for rotation
	
	// --------- Segment image and fit ellipses
	// use sum or trans (try trans)
	// --------- Identify mother cell
	// filter ellipses by size and aspect ratio
	// for remaining ellipses sort out mother and buds -- largest is mother. 

	// simulate the values obtained from analyze particles + ellipse fit + centroid
	// this represents the mother cell
	//CENTER_X = 100;
	//CENTER_Y = 50;
	//MAJ_AXIS = 110;
	//MIN_AXIS = 85;
	//ANGLE = 128; // enter this same number into the rotate dialog to get a horizontal result
	// ========= end testing
	
	// --------- Transform image to produce a consistent output for further analysis
	
	// Crop image centering on the mother cell 
	cropName = basename+"_cell.tif";
	run("Specify...", "width=&CROPSIZE height=&CROPSIZE x=&CENTER_X y=&CENTER_Y slice=1 centered"); // using the center of the cell
	run("Duplicate...", "title=&cropName duplicate"); 
	
	// Rotate so major axis angle is horizontal
	
	selectWindow(cropName);
	run("Select None");
	run("Rotate... ", "angle=&ANGLE grid=1 interpolation=Bicubic fill enlarge"); // use the angle identified by ellipse fitting. 
																			// Best interpolation, enlarge image to preserve structures near edge, and fill with background
	saveAs("tiff", outputdir+File.separator+cropName);
	close(); // cropped image
	
	//  Discard Trans image
	
	
	// --------- Save data
	// write a csv file containing fitted ellipses for mother and bud(s) if any, 
	//		including major & minor axes, and original angle (wrt original image and transformed image)
	// save the fluorescence stack of bud scars only 

	} // end processImage
